inTrain
inTrain<-createDataPartition(iris$Species,p=0.7,list=FALSE,times=1)
inTrain
train<-iris[inTrain,]
test<-iris[-inTrain,]
test
train
inTrain
inTrain<-createDataPartition(iris,p=0.7,list=FALSE,times=1)
inTrain
trainIndex <- createDataPartition(iris$Species, p = .8,
list = FALSE,
)
trainIndex
irisTrain <- iris[ trainIndex,]
irisTest  <- iris[-trainIndex,]
fit <- train(data=irisTrain, Species~.,method='rpart')
fancyRpartPlot(fit$finalModel)
predict(fit, newdata = irisTest)
help(confusionMatrix)
confusionMatrix(predict(fit, newdata = irisTest),irisTest)
confusionMatrix(predict(fit, newdata = irisTest),irisTest$Species)
confusionMatrix(predict(fit, newdata = irisTrain),irisTrain$Species)
help(ctreeBag)
## treebag <- bag(bbbDescr, logBBB, B = 10,
##                bagControl = bagControl(fit = ctreeBag$fit,
##                                        predict = ctreeBag$pred,
##                                        aggregate = ctreeBag$aggregate))
treebag
treebag
ozone
data(ozone)
fit <- train(data=irisTrain, Species~.,method='rf')
fit
getTree(fit$finalModel, k=2)
irisP <- classCenter(train[,c(3,4)], train$Species,fit$finalModel$prox)
fit$finalModel$proximity
fit$finalModel
help(classCenter)
fit <- train(data=irisTrain, Species~.,method='rf',prox=TRUE)
fit$finalModel$prox
irisP <- classCenter(train[,c(3,4)], train$Species,fit$finalModel$prox)
irisP
irisP <- classCenter(train, train$Species,fit$finalModel$prox)
irisP
iris.rf <- randomForest(iris[,-5], iris[,5], prox=TRUE)
iris.p <- classCenter(iris[,-5], iris[,5], iris.rf$prox)
iris.p
ifit <- randomForest(iris, iris$Species, prox=TRUE)
iris.p <- classCenter(iris, iris$Species, iris.rf$prox)
ifit <- randomForest(iris[,-5], iris$Species, prox=TRUE)
iris.p <- classCenter(iris[,=5], iris$Species, iris.rf$prox)
ifit <- randomForest(iris[,-5], iris$Species, prox=TRUE)
iris.p <- classCenter(iris[,-5], iris$Species, iris.rf$prox)
iris.p
ifit
fit
class(fit)
class(ifit)
fit <- train(data=irisTrain, Species~.,method='lda')
fit
plot(fit)
plot(fit$finalModel)
library(rpart)
library(ElemStatLearn)
installed.packages(pgmm)
installed.packages('pgmm')
installed.packages('AppliedPredictiveModeling')
install.packages('AppliedPredictiveModeling')
library('AppliedPredictiveModeling')
library('pgmm')
library('ElemStatLearn')
library('rpart')
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
segment <- segmentationOriginal
segment
str(segment)
trainIndex <- createDataPartition(segment$Case,list=FALSE)
set.seed(125)
train <- segment[trainIndex,]
test<-segment[-trainIndex,]
fit <-train(Case~.,data=train,method='rpart')
fit
fancyRpartPlot(fit$finalModel)
str(train)
fit$method
fit$finalModel
fit <-train(Case~.,data=train,method='rpart')
fit
fit$finalModel
set.seed(125)
fit <-train(Case~.,data=train,method='rpart')
fit$finalModel
fit$finalModel
fit <-train(Case~.,data=train,method='rpart')
fit$finalModel
fancyRpartPlot(fit$finalModel)
trainIndex<-segment[segment$Case=='train',]
training <- segment[trainIndex,]
trainIndex
trainIndex<-segment$Case=='train'
training <- segment[trainIndex,]
training
View(test)
View(test)
View(training)
trainIndex
trainIndex<-segment$Case=='Train'
training <- segment[trainIndex,]
training
testing<-segment[-trainIndex,]
testing
testing
testing<-segment[!trainIndex,]
set.seed(125)
fit<-train(Class~.,data=training,method='rpart')
fancyRpartPlot(fit$finalModel)
predict(fit, TotalIntenCh2 ==1)
library(pgmm)
data(olive)
olive = olive[,-1]
olive
str(olive)
newdata = as.data.frame(t(colMeans(olive)))
head(newdata)
newdata
head(olive)
data(olive)
head(olive)
library(pgmm)
data(olive)
olive = olive[,-1]
fit <- train(Area~.,data=olive,method='rpart')
predict(fit,newdata=newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
fit <- train(chd~.,data=trainSA,method='glm', family='binomial')
str(trainSA)
fol<-chd~age+alcohol+obesity+tobacco+typea+ldl
fit <- train(fol.,data=trainSA,method='glm', family='binomial')
fit <- train(fol,data=trainSA,method='glm', family='binomial')
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd,predict(fit,newdata=testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
set.seed(33833)
fit <- train(y~.,data=vowel.train,method='rf')
help(varlamp)
help("varImp")
varImp(fit)
varImp(fit$finalModel)
help(randomForest)
fit <- randomForest(y~.,data=vowel.train)
fit
varImp(fit)
help(varImp)
fit <- randomForest(y~.,data=vowel.train,importance=FALSE)
varImp(fit)
order(varImp(fit), decreasing = TRUE)
modelfit <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
order(varImp(modelfit), decreasing = TRUE)
vowel.train$y<-as.factor(vowel.train$y)
modelfit <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
order(varImp(modelfit), decreasing = TRUE)
modelfit <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
i<-order(varImp(modelfit), decreasing = TRUE)
i
vowel.train[,i]
head(vowel.train)
head(vowel.train[,i])
head(vowel.train[,i+1])
gpclib
install.packages('gpblib')
install.packages('gpclib')
help(gpclib)
library(gpclib)
help(gpclib)
class ? gpc.poly
a <- cbind(rnorm(100), rnorm(100))
a <- a[chull(a), ]
a
plot(a)
p1 <- read.polyfile(system.file("poly-ex/ex-poly1.txt", package = "gpclib"))
p2 <- read.polyfile(system.file("poly-ex/ex-poly2.txt", package = "gpclib"))
plot(append.poly(p1, p2))
plot(setdiff(p2, p1), poly.args = list(col = 4), add = TRUE)
ls()
#Check and download + unzip raw data
zipname <- 'HAR.zip'
if (!file.exists(zipname)) download.file(url='https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip',
destfile ='HAR.zip')
if (!file.exists('UCI HAR Dataset')) unzip(zipname)
#Info
#activity_labels.txt - labels and numbers
#features.txt - features and numbers
#test/train
#subject_test/train.txt - subject identifier
#X_test/train.txt - features (identified by number 1-561)
#Y_test/train.txt - labels (identified by number 1-6)tra
#Get feature names
feature_name <- read.table(file='UCI HAR Dataset/features.txt')
#Get activity label names
label_name <- read.table(file='UCI HAR Dataset/activity_labels.txt')
#Test set
#Read subject
subject_test <- read.table(file='UCI HAR Dataset/test/subject_test.txt')
names(subject_test)<-c('subject')
#Read X
X_test <- read.table(file='UCI HAR Dataset/test/X_test.txt')
#Match feature names with feature columns
names(X_test)<-feature_name[,2]
#Get only variables related to mean and std
q<-names(X_test)
mean_index <- q[grep('mean',names(X_test))]
std_index <- q[grep('std',names(X_test))]
index <- c(mean_index,std_index)
#Read y
y_test <- read.table(file='UCI HAR Dataset/test/y_test.txt')
#Match labels with number
y_test[[2]]<-sapply(y_test[[1]],FUN=function(x) label_name[x,2])
names(y_test)<-c('label_no','label')
#Set levels
levels(y_test$label)<-label_name[,2]
#Combine complete test set
test<- cbind(subject=subject_test$subject,label=y_test$label,X_test[index])
test$set <- 'test'
#Train set
#Read subject
subject_train <- read.table(file='UCI HAR Dataset/train/subject_train.txt')
names(subject_train)<-c('subject')
#Read X
X_train <- read.table(file='UCI HAR Dataset/train/X_train.txt')
#Match feature names with feature columns
names(X_train)<-feature_name[,2]
#Read y
y_train <- read.table(file='UCI HAR Dataset/train/y_train.txt')
#Match labels with number
y_train[[2]]<-sapply(y_train[[1]],FUN=function(x) label_name[x,2])
names(y_train)<-c('label_no','label')
#Set levels
levels(y_train$label)<-label_name[,2]
#Combine complete train set
train<- cbind(subject=subject_train$subject,label=y_train$label,X_train[index])
train$set<-'train'
#Combine test and train
whole <- rbind(test,train)
#Aggregate by subject and label using mean
tidy<-aggregate(.~subject+label,data=whole[,1:81],mean)
tidy<-tidy[order(tidy$subject),]
#Write table
write.table(tidy,file='tidy.txt')
setwd("~/projects/getting_final")
#Check and download + unzip raw data
zipname <- 'HAR.zip'
if (!file.exists(zipname)) download.file(url='https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip',
destfile ='HAR.zip')
if (!file.exists('UCI HAR Dataset')) unzip(zipname)
#Info
#activity_labels.txt - labels and numbers
#features.txt - features and numbers
#test/train
#subject_test/train.txt - subject identifier
#X_test/train.txt - features (identified by number 1-561)
#Y_test/train.txt - labels (identified by number 1-6)tra
#Get feature names
feature_name <- read.table(file='UCI HAR Dataset/features.txt')
#Get activity label names
label_name <- read.table(file='UCI HAR Dataset/activity_labels.txt')
#Test set
#Read subject
subject_test <- read.table(file='UCI HAR Dataset/test/subject_test.txt')
names(subject_test)<-c('subject')
#Read X
X_test <- read.table(file='UCI HAR Dataset/test/X_test.txt')
#Match feature names with feature columns
names(X_test)<-feature_name[,2]
#Get only variables related to mean and std
q<-names(X_test)
mean_index <- q[grep('mean',names(X_test))]
std_index <- q[grep('std',names(X_test))]
index <- c(mean_index,std_index)
#Read y
y_test <- read.table(file='UCI HAR Dataset/test/y_test.txt')
#Match labels with number
y_test[[2]]<-sapply(y_test[[1]],FUN=function(x) label_name[x,2])
names(y_test)<-c('label_no','label')
#Set levels
levels(y_test$label)<-label_name[,2]
#Combine complete test set
test<- cbind(subject=subject_test$subject,label=y_test$label,X_test[index])
test$set <- 'test'
#Train set
#Read subject
subject_train <- read.table(file='UCI HAR Dataset/train/subject_train.txt')
names(subject_train)<-c('subject')
#Read X
X_train <- read.table(file='UCI HAR Dataset/train/X_train.txt')
#Match feature names with feature columns
names(X_train)<-feature_name[,2]
#Read y
y_train <- read.table(file='UCI HAR Dataset/train/y_train.txt')
#Match labels with number
y_train[[2]]<-sapply(y_train[[1]],FUN=function(x) label_name[x,2])
names(y_train)<-c('label_no','label')
#Set levels
levels(y_train$label)<-label_name[,2]
#Combine complete train set
train<- cbind(subject=subject_train$subject,label=y_train$label,X_train[index])
train$set<-'train'
#Combine test and train
whole <- rbind(test,train)
#Aggregate by subject and label using mean
tidy<-aggregate(.~subject+label,data=whole[,1:81],mean)
tidy<-tidy[order(tidy$subject),]
#Write table
write.table(tidy,file='tidy.txt')
library(caret)
inTrain <- createDataPartition(tidy,p=0.7,list=FALSE)
inTrain <- createDataPartition(tidy$label,p=0.7,list=FALSE)
train<-tidy[inTrain,]
test<-tidy[-inTrain,]
fit <- train(label~.,data=train,method='rpart')
str(train)
fit <- train(label~.,data=train[,2;81],method='rpart')
fit <- train(label~.,data=train[,2:81],method='rpart')
help(train)
fit <- train(label ~ .,data=train,method='rpart')
fit <- train(label ~ fBodyBodyAccJerkMag-std() ,data=train,method='rpart')
names(train)<-c(subject,label,1:79)
names(train)<-c('subject','label',1:79)
str(train)
names(test)<-c('subject','label',1:79)
fit <- train(label ~ . ,data=train,method='rpart')
fit <- train(label ~ 1+2 ,data=train,method='rpart')
fit <- train(subject~.,data=train,method='rpart')
fit <- train(subject~.,data=train,method='lm')
fit
fit <- train(label~.,data=train,method='glm')
fit <- train(label~.,data=train,method='rf')
fit$finalModel
fit
plot(fit)
getTree(fit$finalModel, k=1)
predict(fit, newdata=test$label)
predict(fit, newdata=test)
p<-predict(fit, newdata=test)
confusionMatrix(fit,p)
help("confusionMatrix")
confusionMatrix(test$label,p)
t<-getTree(fit$finalModel, k=1)
plot(t)
t
t$finalModel
attributes(fit)
fit$finalModel
help(update)
fit<-update(fit, method='rpart')
fit
fit$finalModel
fit<-train(label~.,data=train,method='rpart')
head(train)
fit<-train(label~.,data=train,method='lm')
help(train)
getModelInfo
getModelInfo()
fit<-train(label~.,data=train,method='svm')
library(rport)
library(rpart)
fit<-train(label~.,data=train,method='svm')
svm
library(svm)
fit<-train(label~.,data=train,method='treebag')
fit<-train(label~.,data=train,method='glm')
fit<-train(label~.,data=train,method='rpart')
names(train)<-c('subject','label',for (i in 1:79) paste('var',i))
names(train)
names(train)<-c('subject','label',c('var',1:79))
names(train)<-c('subject','label',paste('var',1:79))
names(train)
fit<-train(label~.,data=train,method='rpart')
library(e1071)
fit<-train(label~.,data=train,method='svm')
fit<-train(label~var1,data=train,method='rpart')
fit<-train(label~var 1,data=train,method='rpart')
names(train)<-c('subject','label',paste('var',1:79,sep=''))
names(train)
fit<-train(label~var1,data=train,method='rpart')
fit<-train(label~.,data=train,method='rpart')
fit
fit$finalModel
hclust(train)
hclust(train$label)
help(hclust)
hclust(dist(train))
h<-hclust(dist(train))
plot(h)
m<-svm(label~.,data=train)
plot(m,train)
plot(m,train)
m
plot(m,train,var1~var2)
plot(m,train,var1~var3)
predict(m,newdata=test)
m
m$fitted
attributes(m)
m<-svm(label~.,data=train,probability=TRUE)
m
predict(m,test)
fitted(m)
test
names(test)<-c('subject','label',paste('var',1:79,sep=''))
pred<-predict(m,newdata=test)
confustionMatrix(test$label,pred)
confusionMatrix(test$label,pred)
fit<-train(label~.,data=train,method='glm')
fit<-train(label~.,data=train,method='lm')
fit<-train(label~.,data=train,method='rf')
fit$finalModel
fit
confusionMatrix(test$label,pred)
confusionMatrix(test$label,predict(fit,test$label))
pred<-predict(fit,test$label)
names(test)
names(train)
pred<-predict(fit,test)
confusionMatrix(test$label,pred)
fit
m
m$fitted
plot(m,test)
plot(m,var23~var12,test)
plot(m,test,var13~var22)
plot(m,test,var2~var1)
plot(m,test,label~var1)
setwd("~/projects/getting_final")
tidy
str(tidy)
#Check and download + unzip raw data
zipname <- 'HAR.zip'
if (!file.exists(zipname)) download.file(url='https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip',
destfile ='HAR.zip')
if (!file.exists('UCI HAR Dataset')) unzip(zipname)
#Info
#activity_labels.txt - labels and numbers
#features.txt - features and numbers
#test/train
#subject_test/train.txt - subject identifier
#X_test/train.txt - features (identified by number 1-561)
#Y_test/train.txt - labels (identified by number 1-6)tra
#Get feature names
feature_name <- read.table(file='UCI HAR Dataset/features.txt')
#Get activity label names
label_name <- read.table(file='UCI HAR Dataset/activity_labels.txt')
#Test set
#Read subject
subject_test <- read.table(file='UCI HAR Dataset/test/subject_test.txt')
names(subject_test)<-c('subject')
#Read X
X_test <- read.table(file='UCI HAR Dataset/test/X_test.txt')
#Match feature names with feature columns
names(X_test)<-feature_name[,2]
#Get only variables related to mean and std
q<-names(X_test)
mean_index <- q[grep('mean',names(X_test))]
std_index <- q[grep('std',names(X_test))]
index <- c(mean_index,std_index)
#Read y
y_test <- read.table(file='UCI HAR Dataset/test/y_test.txt')
#Match labels with number
y_test[[2]]<-sapply(y_test[[1]],FUN=function(x) label_name[x,2])
names(y_test)<-c('label_no','label')
#Set levels
levels(y_test$label)<-label_name[,2]
#Combine complete test set
test<- cbind(subject=subject_test$subject,label=y_test$label,X_test[index])
test$set <- 'test'
#Train set
#Read subject
subject_train <- read.table(file='UCI HAR Dataset/train/subject_train.txt')
names(subject_train)<-c('subject')
#Read X
X_train <- read.table(file='UCI HAR Dataset/train/X_train.txt')
#Match feature names with feature columns
names(X_train)<-feature_name[,2]
#Read y
y_train <- read.table(file='UCI HAR Dataset/train/y_train.txt')
#Match labels with number
y_train[[2]]<-sapply(y_train[[1]],FUN=function(x) label_name[x,2])
names(y_train)<-c('label_no','label')
#Set levels
levels(y_train$label)<-label_name[,2]
#Combine complete train set
train<- cbind(subject=subject_train$subject,label=y_train$label,X_train[index])
train$set<-'train'
#Combine test and train
whole <- rbind(test,train)
#Aggregate by subject and label using mean
tidy<-aggregate(.~subject+label,data=whole[,1:81],mean)
tidy<-tidy[order(tidy$subject),]
#Write table
write.table(tidy,file='tidy.txt',row.name=FALSE)
tidy
